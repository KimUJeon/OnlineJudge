T = int(input())


def GCD(a, b):
    while(b):
        a, b = b, a % b
    return a


def LCM(a, b):
    result = a*b // GCD(a, b)
    return result


for i in range(T):
    a, b = map(int, input().split())
    print(LCM(a, b))


<문제>
두 자연수 A와 B에 대해서, A의 배수이면서 B의 배수인 자연수를 A와 B의 공배수라고 한다. 이런 공배수 중에서 가장 작은 수를 최소공배수라고 한다. 
예를 들어, 6과 15의 공배수는 30, 60, 90등이 있으며, 최소 공배수는 30이다.
두 자연수 A와 B가 주어졌을 때, A와 B의 최소공배수를 구하는 프로그램을 작성하시오.

<입력>
첫째 줄에 테스트 케이스의 개수 T(1 ≤ T ≤ 1,000)가 주어진다. 둘째 줄부터 T개의 줄에 걸쳐서 A와 B가 주어진다. (1 ≤ A, B ≤ 45,000)

<출력>
첫째 줄부터 T개의 줄에 A와 B의 최소공배수를 입력받은 순서대로 한 줄에 하나씩 출력한다.

<예제 입력 1> 
3
1 45000
6 10
13 17
<예제 출력 1> 
45000
30
221

<해설>
최소공배수는 두 수의 곱을 최대공약수로 나누었을때 구할 수 있다는 점에서 다음과 같은 코드가 나왔다.
GCD 함수는 최대공약수를 구하고 LCM 함수는 최소공배수를 구하는데 math 함수에 gcd, lcm 이 각각 최대공약수와 최소공배수를
쉽게 구하는 함수이므로 이를 참고하고 풀이하면 된다.
GCD 함수의 풀이는 유클리드 호제법을 활용했다.
